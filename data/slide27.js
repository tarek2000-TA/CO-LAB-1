(function(){var loadHandler=window['sl_{0D0F1896-A3A1-4F38-9230-8F992AD62596}'];loadHandler&&loadHandler(26, '<div id="spr0_224495"><div id="spr1_224495" class="kern slide"><img id="img11_224495" src="data/img5.png" width="960px" height="540px" alt="" style="left:0px;top:0px;"/><div id="spr3_224495" style="left:5px;top:523px;"><div style="width:0px;"><span id="txt0_224495" class="nokern" data-width="100.751953" style="top:-1.265px;">Classified as Confidential</span></div></div></div><div id="spr2_224495" class="kern slide"><div id="spr4_224495" style="left:11.732px;top:-2.236px;"><img id="img0_224495" src="data/img32.png" width="108.776" height="101.732" alt="" style="left:-1.007px;top:-1.007px;"/></div><div id="spr5_224495" style="left:55px;top:29px;"><img id="img1_224495" src="data/img41.png" width="308" height="37" alt="Von Neuman Architecture"/></div><div id="spr6_224495" style="left:660.371px;top:33.925px;"><img id="img2_224495" src="data/img89.png" width="291.273" height="191.739" alt=""/></div><div id="spr7_224495" style="left:766.918px;"><div style="width:0px;"><span id="txt1_224495" data-width="46.687500" style="left:7.2px;top:4.878px;">CPU</span></div></div><div id="spr8_224495" style="left:4.691px;top:100.719px;"><img id="img3_224495" src="data/img76.png" width="51" height="46" alt="" style="left:-0.146px;top:0.156px;"/></div><div id="spr9_224495" style="left:4.691px;top:100.719px;"><div style="width:0px;"><span id="txt2_224495" data-width="20.996094" style="left:14.854px;top:8.626px;">PC</span></div></div><div id="spr10_224495" style="left:3.144px;top:155.322px;"><img id="img4_224495" src="data/img77.png" width="65" height="46" alt="" style="left:0.029px;top:0.156px;"/></div><div id="spr11_224495" style="left:3.144px;top:155.322px;"><div style="width:0px;"><span id="txt3_224495" data-width="39.531250" style="left:12.716px;top:8.626px;">MAR</span></div></div><div id="spr12_224495" style="left:5.414px;top:261.851px;"><img id="img5_224495" src="data/img76.png" width="51" height="46" alt="" style="left:-0.146px;top:0.156px;"/></div><div id="spr13_224495" style="left:5.414px;top:261.851px;"><div style="width:0px;"><span id="txt4_224495" data-width="15.898438" style="left:17.417px;top:8.626px;">IR</span></div></div><div id="spr14_224495" style="left:5.414px;top:319.303px;"><img id="img6_224495" src="data/img78.png" width="78" height="29" alt="" style="left:0.008px;top:-0.015px;"/></div><div id="spr15_224495" style="left:5.414px;top:319.303px;"><div style="width:0px;"><span id="txt5_224495" data-width="52.958984" style="left:12.508px;top:-0.045px;">I/O AR</span></div></div><div id="spr16_224495" style="left:3.518px;top:208.653px;"><img id="img7_224495" src="data/img77.png" width="65" height="46" alt="" style="left:0.134px;top:0.156px;"/></div><div id="spr17_224495" style="left:3.518px;top:208.653px;"><div style="width:0px;"><span id="txt6_224495" data-width="38.837891" style="left:13.196px;top:8.626px;">MBR</span></div></div><div id="spr18_224495" style="left:2.182px;top:396.361px;"><img id="img8_224495" src="data/img80.png" width="106.879" height="46.312" alt=""/></div><div id="spr19_224495" style="left:13.356px;top:413.738px;"><div style="width:0px;"><span id="txt7_224495" class="nokern" data-width="66.902344" style="left:7.512px;top:4.186px;">Execution Unit</span></div></div><div id="spr20_224495" style="left:67.701px;top:97.827px;"><div style="width:0px;"><span id="txt8_224495" data-width="504.656250" style="left:7.2px;top:4.346px;">Program Counter: holds the memory address of the next instruction to be fetched from the</span></div><div style="width:0px;"><span id="txt9_224495" data-width="526.401367" style="left:7.2px;top:21.146px;">memory. “initially it holds the first instruction to be fetched then it’s get incremented after the</span></div><div style="width:0px;"><span id="txt10_224495" data-width="239.490234" style="left:7.2px;top:37.946px;">instruction being decoded in the next step”</span></div></div><div id="spr21_224495" style="left:69.458px;top:159.569px;"><div style="width:0px;"><span id="txt11_224495" data-width="550.552734" style="left:7.2px;top:4.346px;">Memory Address register: The program counter will give a copy to this Register and the CPU will</span></div><div style="width:0px;"><span id="txt12_224495" data-width="522.908203" style="left:7.2px;top:21.146px;">use to know from where it’s going to fetch/read or write data from/to which memory location</span></div></div><div id="spr22_224495" style="left:67.701px;top:204.391px;"><div style="width:0px;"><span id="txt13_224495" data-width="507.752930" style="left:7.2px;top:4.346px;">Memory Buffer Register: is the place where to hold data itself that is stored in the memory</span></div><div style="width:0px;"><span id="txt14_224495" data-width="535.752930" style="left:7.2px;top:21.146px;">location being loaded in the MAR during, the fetching process or even the writing process from</span></div><div style="width:0px;"><span id="txt15_224495" data-width="140.765625" style="left:7.2px;top:37.946px;">CPU to memory address.</span></div></div><div id="spr23_224495" style="left:68.297px;top:270.827px;"><div style="width:0px;"><span id="txt16_224495" data-width="524.849609" style="left:7.2px;top:4.346px;">Instruction Register: it holds the address of the current instruction being fetched and decoded.</span></div></div><div id="spr24_224495" style="left:82.808px;top:315.69px;"><div style="width:0px;"><span id="txt17_224495" data-width="789.263672" style="left:7.2px;top:4.346px;">I/O Address Register: it holds the address of the I/O device involved in the current operation (set of instructions) and when the CPU needs to</span></div><div style="width:0px;"><span id="txt18_224495" data-width="699.446289" style="left:7.2px;top:21.146px;">communicate with it, then it knows where to send the control signals or data to which I/O device (monitor, printer or Mouse)</span></div></div><div id="spr25_224495" style="left:4.691px;top:356.345px;"><img id="img9_224495" src="data/img79.png" width="79" height="27" alt="" style="left:-0.191px;top:0.22px;"/></div><div id="spr26_224495" style="left:4.691px;top:356.345px;"><div style="width:0px;"><span id="txt19_224495" data-width="52.265625" style="left:13.184px;top:-0.81px;">I/O BR</span></div></div><div id="spr27_224495" style="left:82.808px;top:359.524px;"><div style="width:0px;"><span id="txt20_224495" data-width="510.849609" style="left:7.2px;top:4.346px;">I/O Buffer Register: Holds the data itself that is being read or written from/to an I/O device</span></div></div><div id="spr28_224495" style="left:108.609px;top:394.916px;"><div style="width:0px;"><span id="txt21_224495" data-width="805.594727" style="left:7.2px;top:4.346px;">The Execution unit: is responsible of executing the whole operation dictated by those set of instructions like adding numbers, moving data from</span></div><div style="width:0px;"><span id="txt22_224495" data-width="549.356445" style="left:7.2px;top:21.146px;">location to another, stoting the output in a specific location, performing logical comparisons…etc.</span></div><div style="width:0px;"><span id="txt23_224495" data-width="342.883789" style="left:7.2px;top:37.946px;">For example: ALU that executes all the arithmetic operations</span></div></div><div id="spr29_224495" style="left:18px;top:466px;"><img id="img10_224495" src="data/img90.png" width="79" height="61" alt=""/></div><div id="spr30_224495" style="left:18px;top:466px;"><div style="width:0px;"><span id="txt24_224495" data-width="54.474609" style="left:10.899px;top:5.96px;">Control</span></div><div style="width:0px;"><span id="txt25_224495" data-width="31.166016" style="left:22.359px;top:27.56px;">Unit</span></div></div><div id="spr31_224495" style="left:109.617px;top:467.746px;"><div style="width:0px;"><span id="txt26_224495" data-width="771.363281" style="left:7.2px;top:4.559px;">The control unit s responsible of decoding the instructions and sending control signals to other components</span></div><div style="width:0px;"><span id="txt27_224495" data-width="201.454102" style="left:7.2px;top:26.159px;">including the execution unit</span></div></div></div></div>', '{"s":[]}');})();