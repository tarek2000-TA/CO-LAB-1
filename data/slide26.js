(function(){var loadHandler=window['sl_{0D0F1896-A3A1-4F38-9230-8F992AD62596}'];loadHandler&&loadHandler(25, '<div id="spr0_22435c"><div id="spr1_22435c" class="kern slide"><img id="img11_22435c" src="data/img5.png" width="960px" height="540px" alt="" style="left:0px;top:0px;"/><div id="spr3_22435c" style="left:5px;top:523px;"><div style="width:0px;"><span id="txt0_22435c" class="nokern" data-width="100.751953" style="top:-1.265px;">Classified as Confidential</span></div></div></div><div id="spr2_22435c" class="kern slide"><div id="spr4_22435c" style="left:11.732px;top:-2.236px;"><img id="img0_22435c" src="data/img32.png" width="108.776" height="101.732" alt="" style="left:-1.007px;top:-1.007px;"/></div><div id="spr5_22435c" style="left:55px;top:29px;"><img id="img1_22435c" src="data/img41.png" width="308" height="37" alt="Von Neuman Architecture"/></div><div id="spr6_22435c" style="left:4.691px;top:100.719px;"><img id="img2_22435c" src="data/img76.png" width="51" height="46" alt="" style="left:-0.146px;top:0.156px;"/></div><div id="spr7_22435c" style="left:4.691px;top:100.719px;"><div style="width:0px;"><span id="txt1_22435c" data-width="20.996094" style="left:14.854px;top:8.626px;">PC</span></div></div><div id="spr8_22435c" style="left:3.144px;top:159.839px;"><img id="img3_22435c" src="data/img77.png" width="65" height="46" alt="" style="left:0.029px;top:0.156px;"/></div><div id="spr9_22435c" style="left:3.144px;top:159.839px;"><div style="width:0px;"><span id="txt2_22435c" data-width="39.531250" style="left:12.716px;top:8.626px;">MAR</span></div></div><div id="spr10_22435c" style="left:4.691px;top:274.398px;"><img id="img4_22435c" src="data/img76.png" width="51" height="46" alt="" style="left:-0.146px;top:0.156px;"/></div><div id="spr11_22435c" style="left:4.691px;top:274.398px;"><div style="width:0px;"><span id="txt3_22435c" data-width="15.898438" style="left:17.417px;top:8.626px;">IR</span></div></div><div id="spr12_22435c" style="left:4.691px;top:336.683px;"><img id="img5_22435c" src="data/img78.png" width="78" height="29" alt="" style="left:0.008px;top:-0.015px;"/></div><div id="spr13_22435c" style="left:4.691px;top:336.683px;"><div style="width:0px;"><span id="txt4_22435c" data-width="52.958984" style="left:12.508px;top:-0.045px;">I/O AR</span></div></div><div id="spr14_22435c" style="left:4.691px;top:217.118px;"><img id="img6_22435c" src="data/img77.png" width="65" height="46" alt="" style="left:0.134px;top:0.156px;"/></div><div id="spr15_22435c" style="left:4.691px;top:217.118px;"><div style="width:0px;"><span id="txt5_22435c" data-width="38.837891" style="left:13.196px;top:8.626px;">MBR</span></div></div><div id="spr16_22435c" style="left:3.191px;top:449.025px;"><img id="img7_22435c" src="data/img80.png" width="106.879" height="46.312" alt=""/></div><div id="spr17_22435c" style="left:14.365px;top:466.402px;"><div style="width:0px;"><span id="txt6_22435c" class="nokern" data-width="66.902344" style="left:7.512px;top:4.186px;">Execution Unit</span></div></div><div id="spr18_22435c" style="left:67.701px;top:97.827px;"><div style="width:0px;"><span id="txt7_22435c" data-width="504.656250" style="left:7.2px;top:4.346px;">Program Counter: holds the memory address of the next instruction to be fetched from the</span></div><div style="width:0px;"><span id="txt8_22435c" data-width="526.401367" style="left:7.2px;top:21.146px;">memory. “initially it holds the first instruction to be fetched then it’s get incremented after the</span></div><div style="width:0px;"><span id="txt9_22435c" data-width="239.490234" style="left:7.2px;top:37.946px;">instruction being decoded in the next step”</span></div></div><div id="spr19_22435c" style="left:69.458px;top:162.478px;"><div style="width:0px;"><span id="txt10_22435c" data-width="550.552734" style="left:7.2px;top:4.346px;">Memory Address register: The program counter will give a copy to this Register and the CPU will</span></div><div style="width:0px;"><span id="txt11_22435c" data-width="522.908203" style="left:7.2px;top:21.146px;">use to know from where it’s going to fetch/read or write data from/to which memory location</span></div></div><div id="spr20_22435c" style="left:72.101px;top:211.837px;"><div style="width:0px;"><span id="txt12_22435c" data-width="507.752930" style="left:7.2px;top:4.346px;">Memory Buffer Register: is the place where to hold data itself that is stored in the memory</span></div><div style="width:0px;"><span id="txt13_22435c" data-width="535.752930" style="left:7.2px;top:21.146px;">location being loaded in the MAR during, the fetching process or even the writing process from</span></div><div style="width:0px;"><span id="txt14_22435c" data-width="140.765625" style="left:7.2px;top:37.946px;">CPU to memory address.</span></div></div><div id="spr21_22435c" style="left:72.101px;top:287.188px;"><div style="width:0px;"><span id="txt15_22435c" data-width="524.849609" style="left:7.2px;top:4.346px;">Instruction Register: it holds the address of the current instruction being fetched and decoded.</span></div></div><div id="spr22_22435c" style="left:85.849px;top:332.991px;"><div style="width:0px;"><span id="txt16_22435c" data-width="789.263672" style="left:7.2px;top:4.346px;">I/O Address Register: it holds the address of the I/O device involved in the current operation (set of instructions) and when the CPU needs to</span></div><div style="width:0px;"><span id="txt17_22435c" data-width="699.446289" style="left:7.2px;top:21.146px;">communicate with it, then it knows where to send the control signals or data to which I/O device (monitor, printer or Mouse)</span></div></div><div id="spr23_22435c" style="left:4.691px;top:383.746px;"><img id="img8_22435c" src="data/img79.png" width="79" height="27" alt="" style="left:-0.191px;top:0.22px;"/></div><div id="spr24_22435c" style="left:4.691px;top:383.746px;"><div style="width:0px;"><span id="txt18_22435c" data-width="52.265625" style="left:13.184px;top:-0.81px;">I/O BR</span></div></div><div id="spr25_22435c" style="left:85.849px;top:384.246px;"><div style="width:0px;"><span id="txt19_22435c" data-width="510.849609" style="left:7.2px;top:4.346px;">I/O Buffer Register: Holds the data itself that is being read or written from/to an I/O device</span></div></div><div id="spr26_22435c" style="left:109.617px;top:419.691px;"><div style="width:0px;"><span id="txt20_22435c" data-width="818.449219" style="left:7.2px;top:4.878px;">The Execution unit: is responsible of executing the whole operation dictated by those</span></div><div style="width:0px;"><span id="txt21_22435c" data-width="819.855469" style="left:7.2px;top:33.678px;">set of instructions like adding numbers, moving data from location to another, stoting</span></div><div style="width:0px;"><span id="txt22_22435c" data-width="678.468750" style="left:7.2px;top:62.478px;">the output in a specific location, performing logical comparisons…etc.</span></div><div style="width:0px;"><span id="txt23_22435c" data-width="587.800781" style="left:7.2px;top:91.278px;">For example: ALU that executes all the arithmetic operations</span></div></div><div id="spr27_22435c" style="left:656.88px;top:33.925px;"><img id="img9_22435c" src="data/img86.png" width="291.273" height="191.739" alt=""/></div><div id="spr28_22435c" style="left:763.428px;top:0px;"><div style="width:0px;"><span id="txt24_22435c" data-width="46.687500" style="left:7.2px;top:4.878px;">CPU</span></div></div><div id="spr29_22435c" style="left:754px;top:50px;"><img id="img10_22435c" src="data/img87.png" width="80" height="61" alt=""/></div><div id="spr30_22435c" style="left:754px;top:50px;"><div style="width:0px;"><span id="txt25_22435c" data-width="54.474609" style="left:11.626px;top:5.857px;">Control</span></div><div style="width:0px;"><span id="txt26_22435c" data-width="31.166016" style="left:23.086px;top:27.457px;">Unit</span></div></div></div></div>', '{"s":[]}');})();